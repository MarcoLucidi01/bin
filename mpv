#!/bin/sh

# mpv: mpv wrapper to always use same mpv instance if already running and append
#      files to playlist.

mpv="/usr/bin/mpv"
sock="/tmp/mpv-socket"

mpvrunning() {
        [ -S "$sock" ] && jq -nc '{"command":["get_version"]}' | socat - "$sock" > /dev/null 2>&1
}

getproperty() {
        jq -nc --arg prop "$1" '{"command":["get_property",$prop]}' | socat - "$sock" | jq -r '.data'
}

setproperty() {
        jq -nc --arg prop "$1" --arg val "$2" '{"command":["set_property",$prop,$val]}' | socat - "$sock" > /dev/null
}

appendfile() {
        jq -nc --arg f "$1" '{"command":["loadfile",$f,"append"]}' | socat - "$sock" > /dev/null
}

# by default we append files to playlist and play the first new file, with
# --keep-playing we keep playing what was already playing.
keepplaying=0
case "$1" in "-k" | "--keep-playing")
        keepplaying=1
        shift
        ;;
esac

if ! mpvrunning; then
        exec $mpv "$@"
        exit 1 # not reached.
fi

# print wrapper usage only if mpv is already running.
case "$1" in "-h" | "--help")
        echo "usage: mpv [-k|--keep-playing] file..."
        exit 0
        ;;
esac

# playlist-count will be equal to the index of the first new file appended.
firstnewindex="$(getproperty "playlist-count")"

for f in "$@"; do
        case "$f" in -*)
                printf 'warn: cannot set option %s because mpv is already running\n' "$f" >&2
                continue
                ;;
        esac

        if [ -e "$f" ]; then
                f="$(realpath "$f")" # for local files we want full path.
        fi
        appendfile "$f"
done

if [ "$keepplaying" -eq 0 ] && [ "$firstnewindex" -lt "$(getproperty "playlist-count")" ]; then
        setproperty "playlist-pos" "$firstnewindex"
fi
